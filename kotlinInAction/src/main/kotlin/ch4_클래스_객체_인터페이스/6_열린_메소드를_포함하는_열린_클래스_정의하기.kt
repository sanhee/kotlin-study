package ch4_클래스_객체_인터페이스


/*
    상속은 fragile base class 라는 문제가 있다.
    - 하위 클래스가 기반 클래스에 대해 가졌던 가정이 기반 클래스를 변경함으로써 깨져 버리는 현상
    - 어떤 클래스가 자신을 상속하는 방법에 대해 정확한 규칙 등을 제공하지 않는다면
      - 그 클래스의 클라이언트는 기반 클래스를 작성한 사람의 의도와는 다른 방식으로 메소드를 오버라이드할 위험이 있음.
    - 이펙티브 자바에서는 "상속을 위한 설계와 문서를 갖추거나, 그럴 수 없다면 상속을 금지하라!"는 조언을 함.

    코틀린도 위와 같은 철학을 따라서 클래스와 메소드는 기본적으로 final이다.
     - 상속이 불가능하다.
     - 하위 클래스에서 오버라이드하지 못하게 금지하려면 오버라이드하는 메소드 앞에 final을 명시해야 한다.
 */

open class RichButton: Clickable {
    override fun click() {
        println("RichButton Click") // 오버라이드한 메소드는 기본적으로 열려있다.
    }

    fun disable() {
        // 이 함수는 final이다. 하위 클래스가 이 메소드를 override할 수 없다.
    }
    open fun animate() {
        // 이 함수는 열려 있다. 하위 클래스에서 이 메소드를 오버라이드해도 된다.
    }
}